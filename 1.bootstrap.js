(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[1],{

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var wasm_snake__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! wasm-snake */ \"./node_modules/wasm-snake/wasm_snake.js\");\n/* harmony import */ var wasm_snake_wasm_snake_bg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! wasm-snake/wasm_snake_bg */ \"./node_modules/wasm-snake/wasm_snake_bg.wasm\");\n\n\n\nconst CELL_SIZE = 20; // px\nconst GRID_COLOR = \"#CCCCCC\";\nconst cellColors = {\n  [wasm_snake__WEBPACK_IMPORTED_MODULE_0__[\"Cell\"].Dead]: \"#FFFFFF\",\n  [wasm_snake__WEBPACK_IMPORTED_MODULE_0__[\"Cell\"].Alive]: \"#42f560\",\n  [wasm_snake__WEBPACK_IMPORTED_MODULE_0__[\"Cell\"].Apple]: \"#FF0000\"\n}\n\nconst universe = wasm_snake__WEBPACK_IMPORTED_MODULE_0__[\"Universe\"].new(32, 32);\nconst width = universe.width();\nconst height = universe.height();\n\n/** @type {HTMLCanvasElement} */\nconst canvas = document.getElementById(\"game-of-life-canvas\");\ncanvas.height = (CELL_SIZE + 1) * height + 1;\ncanvas.width = (CELL_SIZE + 1) * width + 1;\n/** @type {CanvasRenderingContext2D} */\nconst ctx = canvas.getContext('2d');\n\n\nconst getIndex = (row, column) => {\n  return row * width + column;\n};\n\nconst drawGrid = () => {\n  ctx.beginPath();\n  ctx.strokeStyle = GRID_COLOR;\n\n  // Vertical lines.\n  for (let i = 0; i <= width; i++) {\n    ctx.moveTo(i * (CELL_SIZE + 1) + 1, 0);\n    ctx.lineTo(i * (CELL_SIZE + 1) + 1, (CELL_SIZE + 1) * height + 1);\n  }\n\n  // Horizontal lines.\n  for (let j = 0; j <= height; j++) {\n    ctx.moveTo(0,                           j * (CELL_SIZE + 1) + 1);\n    ctx.lineTo((CELL_SIZE + 1) * width + 1, j * (CELL_SIZE + 1) + 1);\n  }\n\n  ctx.stroke();\n}\n\nconst drawCells = () => {\n  const cellsPtr = universe.cells();\n  const cells = new Uint8Array(wasm_snake_wasm_snake_bg__WEBPACK_IMPORTED_MODULE_1__[\"memory\"].buffer, cellsPtr, width * height);\n\n  ctx.beginPath();\n\n  for (let row = 0; row < height; row++) {\n    for (let col = 0; col < width; col++) {\n      const idx = getIndex(row, col);\n\n      ctx.fillStyle = cellColors[cells[idx]];\n\n\n      ctx.fillRect(\n        col * (CELL_SIZE + 1) + 1,\n        row * (CELL_SIZE + 1) + 1,\n        CELL_SIZE,\n        CELL_SIZE\n      );\n    }\n  }\n\n  ctx.stroke();\n};\n\nconst keys = {\n  \"ArrowUp\": wasm_snake__WEBPACK_IMPORTED_MODULE_0__[\"Direction\"].Up,\n  \"ArrowDown\": wasm_snake__WEBPACK_IMPORTED_MODULE_0__[\"Direction\"].Down,\n  \"ArrowLeft\": wasm_snake__WEBPACK_IMPORTED_MODULE_0__[\"Direction\"].Left,\n  \"ArrowRight\": wasm_snake__WEBPACK_IMPORTED_MODULE_0__[\"Direction\"].Right,\n};\n\ndocument.addEventListener(\"keydown\", (e) => {\n  if (e.key in keys) {\n    universe.set_direction(keys[e.key]);\n  }\n})\n\nconst score = document.getElementsByClassName(\"score\");\nconst results = document.getElementById(\"results-screen\");\nconst restart = document.getElementById(\"restart\");\nrestart.addEventListener(\"click\", () => {\n  results.style.opacity = \"0\";\n  universe.restart();\n  renderLoop();\n})\n\nconst renderLoop = () => {\n  const alive = universe.tick();\n\n  for (let i = 0; i < score.length; i++) {\n    score[i].innerHTML = universe.score();\n  }\n\n  if (alive) {\n    drawGrid();\n    drawCells();\n    setTimeout(() => requestAnimationFrame(renderLoop), Math.log((100) / (universe.score() + 1)) * 20)\n  } else {\n    results.style.opacity = \"1\";\n  }\n}\n\n\ndrawGrid();\ndrawCells();\nrenderLoop();\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

}]);